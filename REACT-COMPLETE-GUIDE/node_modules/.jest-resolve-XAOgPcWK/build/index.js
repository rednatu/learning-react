'use strict';

var _fs;

function _load_fs() {
  return (_fs = _interopRequireDefault(require('fs')));
}

var _path;

function _load_path() {
  return (_path = _interopRequireDefault(require('path')));
}

var _node_modules_paths;

function _load_node_modules_paths() {
  return (_node_modules_paths = _interopRequireDefault(
    require('./node_modules_paths')
  ));
}

var _is_builtin_module;

function _load_is_builtin_module() {
  return (_is_builtin_module = _interopRequireDefault(
    require('./is_builtin_module')
  ));
}

var _default_resolver;

function _load_default_resolver() {
  return (_default_resolver = _interopRequireDefault(
    require('./default_resolver.js')
  ));
}

var _chalk;

function _load_chalk() {
  return (_chalk = _interopRequireDefault(require('chalk')));
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++)
      arr2[i] = arr[i];
    return arr2;
  } else {
    return Array.from(arr);
  }
}
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

const NATIVE_PLATFORM = 'native';

// We might be inside a symlink.
const cwd = process.cwd();
const resolvedCwd = (_fs || _load_fs()).default.realpathSync(cwd) || cwd;
const nodePaths = process.env.NODE_PATH
  ? process.env.NODE_PATH.split((_path || _load_path()).default.delimiter)
      .filter(Boolean)
      // The resolver expects absolute paths.
      .map(p => (_path || _load_path()).default.resolve(resolvedCwd, p))
  : null;

class Resolver {
  constructor(moduleMap, options) {
    this._options = {
      browser: options.browser,
      defaultPlatform: options.defaultPlatform,
      extensions: options.extensions,
      hasCoreModules:
        options.hasCoreModules === undefined ? true : options.hasCoreModules,
      moduleDirectories: options.moduleDirectories || ['node_modules'],
      moduleNameMapper: options.moduleNameMapper,
      modulePaths: options.modulePaths,
      platforms: options.platforms,
      resolver: options.resolver,
      rootDir: options.rootDir
    };
    this._moduleMap = moduleMap;
    this._moduleIDCache = Object.create(null);
    this._moduleNameCache = Object.create(null);
    this._modulePathCache = Object.create(null);
  }

  static findNodeModule(path, options) {
    const resolver = options.resolver /* $FlowFixMe */
      ? require(options.resolver)
      : (_default_resolver || _load_default_resolver()).default;
    const paths = options.paths;

    try {
      return resolver(path, {
        basedir: options.basedir,
        browser: options.browser,
        extensions: options.extensions,
        moduleDirectory: options.moduleDirectory,
        paths: paths ? (nodePaths || []).concat(paths) : nodePaths,
        rootDir: options.rootDir
      });
    } catch (e) {}
    return null;
  }

  resolveModuleFromDirIfExists(dirname, moduleName, options) {
    const paths = (options && options.paths) || this._options.modulePaths;
    const moduleDirectory = this._options.moduleDirectories;
    const key =
      dirname + (_path || _load_path()).default.delimiter + moduleName;
    const defaultPlatform = this._options.defaultPlatform;
    const extensions = this._options.extensions.slice();
    if (this._supportsNativePlatform()) {
      extensions.unshift.apply(
        extensions,
        _toConsumableArray(
          this._options.extensions.map(ext => '.' + NATIVE_PLATFORM + ext)
        )
      );
    }
    if (defaultPlatform) {
      extensions.unshift.apply(
        extensions,
        _toConsumableArray(
          this._options.extensions.map(ext => '.' + defaultPlatform + ext)
        )
      );
    }

    // 0. If we have already resolved this module for this directory name,
    //    return a value from the cache.
    if (this._moduleNameCache[key]) {
      return this._moduleNameCache[key];
    }

    // 1. Check if the module i